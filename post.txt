- Why is Slack so awesome?
  - For non-developers: Slick user-inteface, teams and channels to keep communication separate and relevant, way faster and informal than email, tons of integrations for
    productivity(Dropbox, Box, Google Calendar, Hangouts etc), and fun to use - emojis and GIFs
  - For developers: Potential for interesting applications with their APIs and integrations:Web hooks, Slash commands and Bots

- Goal of the tutorial
  - This turorial aims to help developers get up and running with a simple node app that turns your slack channel into a custom command-line terminal. The app
    uses a helper module called 'slack-terminalize'(disclaimer: I developed it), that abstracts away initial processing of the messages, helping the developer to focus on command implementations instead. It uses the Slack real-time API and prepares a bot to listen and respond to your requests.

- Need/Motivation for slack-terminalize
  While there're many fancy hubot scripts that respond to natural language queries, a lot can be achieved with short commands and minimal keystrokes, as any linux terminal fan would agree. Simple commands also prove especially useful in a mobile device. And when you intend to work with a command-line system, a lot of grunt work remains fairly generic, irrespective of the application. With that in mind, I felt the need of a module that could take care of exactly that. With a parse-and-dispatch approach and a plugin-like architecture to add custom commands, slack-terminalize facilitates seting up a working app in a matter of minutes.

- Why not Slash commands?
  - Slash commands(link) are one way to achieve this, but each slash command that you add counts as a separate integration(link), and with the free tier of Slack, there's a limit on the number of integrations that can be added to a team. So this project takes a different approach, of using the Real-time API(link) to listen to every message posted on the configured channels, tokenize the message to break them down to command and args.

- What would be good to know, before getting started?
  - Working knowledge of Javascript and NodeJS
  - Familiarity with Slack jargon: teams, channels, bot, integrations
  - Good pre-reads:
    - Introduction to Hubot
    - ... and other useful getting started links

- Getting started
  - First, let's create a bot new bot user to your team, that can take your orders! Go to https://<your-team-name>.slack.com/services/new/bot and choose a name for your 
    bot. Copy the API token shown to you, as this is required for your bot to be able to interact with your slack channels. Configure other details of the bot, like it's profile image and real name and hit Save Integration.

  - Clone and set up the sample app with github link

  - Project structure walkthrough.. organization of directories and files
    1. The only required dependency is slack-terminalize, but since the sample app has an example to show how to handle async commands, request is used to make some REST calls.

    2. config/
      As you can see config/ directory has two json files:
      
      1. commands.json - This is what makes adding custom commands a piece of cake. Each command is represented ny a key-value pair, with key being the command(primary) name itself, and value being any object with custom key-value pairs, that you would want to use for a command.
      e.g: Here I use, for custom fields for each command: 
        - alias - these are the aliases(or secondary names) for the command, which can also be used in the slack channel
        - description - a short readable description of what the command does
        - help - a short help message, to do something like man <command-name> or help <command-name>
        - endpoint - REST endpoint that the command should talk to, in case, it depends on any external services to perform its task
      None of these is mandatory, you're free to use any fields inside the command object, that makes sense for your app

      2. responses.json - Instead of embedding string messages in the command implementation itself, this json makes it easy to define the various cases your command could run into(like success, error, insufficient_arguments) and the corresponding response templates

    3. commands/
      This is where the magic happens, place where you implement your commands. Each command specified in config/commands.json should have its matching implementation here, with the filename matching the key(primary name) used in that json. That is how the dispatcher invokes the right handler.


  - Code walkthrough for the sample app
  - How to declare custom commands, defining their implementation
  - Implementing two simple commands: one that responds synchronously, and one that responds asynchronously(calls an external API, to fetch response)
  - Various configurations that can be passed to <my-module-name> to customize the bot behavior and project structure

- Bonus Stuffs
  - Adding your new bot to other channels
  - Changing how your bot looks

- Improvements.. Next in Series
  - Building custom slash commands, that enables easy distribution of commands to other teams and also makes secure communication possible. It also has support for
    ephemeral messages, which is especially useful if youâ€™re running on free tier of Slack, which has a 10,000 message limit per channel.
  - Building a Yeoman generator to generate the sample app we discussed in this article

- Links/Resources
  - Slack Bot Users - https://api.slack.com/bot-users
  - Slack APIs - https://api.slack.com/
  - Hubot - https://hubot.github.com/
  - Hubot Slack - https://github.com/slackhq/hubot-slack
  - Node Slack Client - https://github.com/slackhq/node-slack-client
  - REST vs WebSockets - https://www.pubnub.com/blog/2015-01-05-websockets-vs-rest-api-understanding-the-difference/
  - How to create and publish your first Node module - https://medium.com/@jdaudier/how-to-create-and-publish-your-first-node-js-module-444e7585b738#.apmx8akep
  - Checklist for your new Open Source JS project - https://ericdouglas.github.io/2015/09/27/checklist-for-your-new-open-source-javascript-project/